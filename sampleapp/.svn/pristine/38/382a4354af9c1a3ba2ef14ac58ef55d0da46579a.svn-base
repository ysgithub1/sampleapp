package controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.hamcrest.core.IsNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.Bootstrap_container;
import com.Head;
import com.Script;

import form.Display2Form;

import model.TblOrder;
import model.TblResult;
import model.TblResultPK;
import repository.TblOrderRepository;
import repository.TblResultRepository;
import validation.GroupOrder;

@Controller
public class Display2Controller {

	@Autowired
	HttpSession session;
	
	private Script script=new Script();
	private Head head;
	private Bootstrap_container container;	
	
	@Autowired
	TblOrderRepository orderRep;

	@Autowired
	TblResultRepository resultRep;
	
	 @RequestMapping(value = "/orderget", method = RequestMethod.POST)
	 public String orderget(Model model, @Validated(GroupOrder.class) @ModelAttribute("Display2Form") 
			 			Display2Form display2Form
		 				, BindingResult result	 
		 				, HttpSession session
		 				) {
//		 classCom(model, session.getAttribute("session2").toString());
		 model.addAttribute("script", script.getScript());
		 head = new Head("表示2");
		 model.addAttribute("head",head.getHead());
		 container = new Bootstrap_container("表示2",session.getAttribute("session2").toString()); 
		 modelmake(model);

		 //		 if(result.hasErrors()) {
//			 return "display2";
//		 }
		 List<TblOrder> orderList ;
		 if ( display2Form.getDeliveryDateTo().isEmpty()){
		 	orderList=orderRep.findBydeliveryDateGreaterThanEqual(display2Form.getDeliveryDateFrom());
		 }else {
			 orderList=orderRep.findBydeliveryDateBetween(display2Form.getDeliveryDateFrom()
					 										, display2Form.getDeliveryDateTo());
		 }
		 String orderResult ="";
		 if(orderList.size()>0) {
			 orderResult += "<table class=\"table\">"+"\n";
			 orderResult += "<thead>"+"\n";
			 orderResult += "<tr>"+"\n";
//			 orderResult += "<th>#</th>"+"\n";
			 orderResult += "<th>管轄</th>"+"\n";
			 orderResult += "<th>注文NO</th>"+"\n";
			 orderResult += "<th>納期</th>"+"\n";
			 orderResult += "<th>商品名</th>"+"\n";
			 orderResult += "<th>サイズ</th>"+"\n";
			 orderResult += "<th>注文数</th>"+"\n";
			 orderResult += "</tr>"+"\n";
			 orderResult += "</thead>"+"\n";
			 orderResult += "<tbody>"+"\n";
			 for(TblOrder order : orderList) {
				 orderResult += "<tr>"+"\n";
				 orderResult += "<td>"+ order.getId().getJurisdiction() +"</td>\n";
				 orderResult += "<td>"+ order.getId().getOrderNo() +"</td>\n";
				 orderResult += "<td>"+ order.getDeliveryDate() +"</td>\n";
				 orderResult += "<td>"+ order.getTblProduct().getProductName() +"</td>\n";
				 orderResult += "<td>"+ order.getSize() +"</td>\n";
				 orderResult += "<td>"+ order.getOrderQuantity() +"</td>\n";
				 orderResult += "</tr>"+"\n";
		    	}
			 orderResult += "</tbody>"+"\n";
			 orderResult += "</table>"+"\n";
			 model.addAttribute("orderlist", orderResult);
		 }else {
			  model.addAttribute("orderlist", "指定期間の注文はありません。");
		 }
		 
		 
		 return "display2";
	 }
	 
	 @RequestMapping(value = "/orderAdjustment", method = RequestMethod.POST)
	 public String orderAdjustment(Model model, @Validated(GroupOrder.class) @ModelAttribute("Display2Form") 
		Display2Form display2Form
		, BindingResult result	 
		, HttpSession session
		) {
//		 classCom(model, session.getAttribute("session2").toString());

		model.addAttribute("script", script.getScript());
		head = new Head("表示2");
		model.addAttribute("head",head.getHead());
		container = new Bootstrap_container("表示2",session.getAttribute("session2").toString()); 
		modelmake(model);

		 //if(result.hasErrors()) {
		//return "display2";
		//}
//		List<TblOrder> orderList ;
//		if ( display2Form.getDeliveryDateTo().isEmpty()){
//			orderList=orderRep.findBydeliveryDateGreaterThan(display2Form.getDeliveryDateFrom());
//		}else {
//			orderList=orderRep.findBydeliveryDateBetween(display2Form.getDeliveryDateFrom()
//			 										, display2Form.getDeliveryDateTo());
//		}
		DateFormat format = new SimpleDateFormat("yyyyMMddHHmmssSSS");
//		時間取得
		String strDatetime = format.format(new Date());
		
//		結果TBLへ書き込み
//		TblResult tblResult = new TblResult(strDatetime,session.getAttribute("session1").toString());
		TblResult tblResult = new TblResult();
		TblResultPK tblResultPK = new TblResultPK();
		tblResultPK.setDatetime(strDatetime);
//		tblResultPK.setDatetime("2018050817210000");
		String id =session.getAttribute("session1").toString();
		tblResultPK.setUser(id);
		tblResult.setId(tblResultPK);
		resultRep.saveAndFlush(tblResult);
//		調整ロジック
		
		
//		完了
		model.addAttribute("orderlist", strDatetime + ":" 
				+ id
				+ ":"
				+"注文調整が完了しました。");
		
		return "display2";
	}
	 
	 
	 private void modelmake(Model model) {
		 model.addAttribute("containerstart", container.getCotainerStart());
		 model.addAttribute("titleheader", container.getHeader());
		 model.addAttribute("menu", container.getMenu());
		 model.addAttribute("contentsstart", container.getContetntsStart());
		 model.addAttribute("contentsend", container.getContentsEnd());
		 model.addAttribute("containerend", container.getCotainerEnd());
	 }
//	 private void classCom(Model model,String userName) {
//		 model.addAttribute("script", script.getScript());
//		 head = new Head("表示2");
//		 model.addAttribute("head",head.getHead());
//		 container = new Bootstrap_container("表示2",userName); 
////		 modelmake(model);
//		 
//	 }
}
